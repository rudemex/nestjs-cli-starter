name: 'Release'

on:
  workflow_dispatch:
    inputs:
      release:
        type: choice
        description: 'Version as:'
        required: true
        options:
          - template
          - application

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_EMAIL: ${{ secrets.GH_EMAIL }}

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['22.18.0']
    name: 'Release'
    steps:
      - name: '⚙ Setup NodeJS v${{ matrix.node }}'
        uses: actions/setup-node@v4.2.0
        with:
          node-version: ${{ matrix.node }}

      - name: '✅ Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '💾 Restore Dependencies from cache'
        uses: actions/cache@v4.2.2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: '🦉 GitGuardian scan'
        uses: GitGuardian/ggshield-action@v1.37.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${GITHUB_REF##*/}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: '📦 Install packages'
        run: yarn install

      - name: '💅 Lint'
        run: yarn lint:format:check

      - name: '🔨 Build'
        run: yarn build

      - name: '👨‍💻 Run Test'
        run: yarn test
        env:
          NODE_ENV: 'test'

      - name: '📊 Publish Test Report'
        uses: dorny/test-reporter@v2
        if: ${{ !cancelled() }}
        with:
          name: 'Test Report (${{ matrix.node }})'
          path: 'junit.xml'
          reporter: jest-junit

      - name: '📊 Upload coverage report to Codecov'
        uses: codecov/codecov-action@v5.4.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: '📊 SonarCloud Scan'
        uses: sonarsource/sonarqube-scan-action@v5.0.0
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.projectVersion=1.0
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.sources=./src
            -Dsonar.exclusions=**/*.bin,node_modules/**,test/**,**/__test__/**,**/__mocks__/**,src/main.ts
            -Dsonar.coverage.exclusions=node_modules/**,test/**,**/__test__/**,**/__mocks__/**,src/main.ts
            -Dsonar.testExecutionReportPaths=test-report.xml
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      #- name: "🦠 Snyk to check for vulnerabilities"
      #  uses: snyk/actions/node@master
      #  env:
      #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: '🏷️ Create Release'
        id: Release
        run: |
          git config --global user.name "GitHub CI/CD bot"
          git config --global user.email "${GITHUB_EMAIL}"
          if ${{github.event.inputs.release == 'template'}}; then
            yarn release --packageFiles 'version.txt' --bumpFiles 'version.txt'
          else
            yarn release
          fi
          git push --follow-tags origin master
          tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: '📄 Create Changelog'
        id: Changelog
        run: |
          git fetch --tags
          tag=$(git tag --sort version:refname | tail -n 2 | head -n 1)
          if [ "$tag" ]; then
            changelog=$(git log --oneline --no-decorate "$tag"..HEAD)
          else
            changelog=$(git log --oneline --no-decorate)
          fi

          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A' - }"
          changelog=" - ${changelog//$'\r'/'%0D'}"

          echo "changelog=$changelog" >> "$GITHUB_OUTPUT"

      - name: '🚀 Publish Release'
        uses: actions/create-release@v1
        with:
          tag_name: '${{steps.Release.outputs.tag}}'
          release_name: '${{steps.Release.outputs.tag}}'
          body: |
            ${{ steps.Changelog.outputs.changelog }}

            ---

            > 💬 All notable changes to this project will be documented in [Changelog](${{ github.event.repository.html_url }}/blob/master/CHANGELOG.md) file.
          draft: false
          prerelease: false

      - name: '🔁 Rebase'
        run: |
          git remote set-url origin "https://github.com/${{ github.repository }}.git"
          git config --global user.name "GitHub CI/CD bot"
          git config --global user.email "${GITHUB_EMAIL}"
          git config pull.rebase true
          git fetch
          git stash push -m "ci: stash standard-version changes"
          git checkout develop
          git pull
          git merge --no-ff -m "ci(rebase): merge master" origin/master
          git push -f
